# Secret key used for encryption:
initial e := {
	0 -> 1/8, 1 -> 1/8, 2 -> 1/8, 3 -> 1/8,
	4 -> 1/8, 5 -> 1/8, 6 -> 1/8, 7 -> 1/8
};
new e_bits := 3; # = log2 e

# Message to encrypt (actual value not important):
new a := 42;

# Publicly-known constant:
new n := 13;

# Used to return results from square_mod(), multiply_mod() and bit_at():
new res := 0;

# Computes a^e mod n
function square_and_multiply(a, e, n) {
	new b := 1;
	
	new i := e_bits;
	while (i > 0) {
		square_mod(b, n); # -> res
		b := res;
		bit_at(e, i); # -> res
		if (res == 1) {
			multiply_mod(b, a, n); # -> res
			b := res
		};
		
		i := i - 1
	};
	
	output b
};

function square_mod(x, m) {
	res := x * x mod n
};

function multiply_mod(x, y, m) {
	res := x * y mod n
};

# Returns the n'th bit of x (either 0 or 1) - lowest bit is n=1
function bit_at(x, n) {
	res := floor (x / 2 ^ (n - 1)) mod 2
};

square_and_multiply(a, e, n)
