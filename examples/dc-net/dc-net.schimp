initial transmitter := { 1 -> 1/4, 2 -> 1/4, 3 -> 1/4, 4 -> 1/4 };
new nodes := 4;

new last_my_bit := { 0 -> 1/2, 1 -> 1/2 };
new last_their_bit := 0;

# is_transmitter: 1 if this node is the transmitter, 0 if not
# their_bit: the private bit generated by the other node
function broadcast(index, is_transmitter, their_bit) {
	new my_bit := 0;
	if (index == nodes - 1) {
		my_bit := last_my_bit
	} else {
		my_bit := { 0 -> 1/2, 1 -> 1/2 }
	};
	
	new b := my_bit xor their_bit;
	# If we're the transmitter, invert our broadcast bit
	if (is_transmitter == 1) { b := b xor 1 };
	
	# Store the bit we just generated, so the next node can use it
	last_their_bit := my_bit;
	
	output b
};

function main() {
	new i := 0;
	while (i < nodes) {
		new is_transmitter := 0;
		if (i + 1 == transmitter) { is_transmitter := 1 };
		
		# broadcast() updates the value of last_their_bit:
		if (i == 0) {
			broadcast(i, is_transmitter, last_my_bit)
		} else {
			broadcast(i, is_transmitter, last_their_bit)
		};
		
		i := i + 1
	}
};

main()
